h1. Woosh

Woosh is a speed testing framework that lets you easily compare the speed of your code to others', or compare different version of your own code.

I'm trying to improve on TaskSpeed (you'll notice similarities) by making it easier to create tests, removing the need for PHP, allowing async tests and tests which measure in units other than time.

I haven't hammered down the API fully yet, so things may change in future commits.

h2. Creating a speed test

Woosh is designed to be used as a git submodule in another project, but it can be checked out and used in a non-git project.

h3. Create an HTML file to run tests again & view results in

Any HTML file will do, a good example can be found at exampletests/template/index.html. The only requirements are including woosh.js, some tests, and a div with ID 'wooshOutput' so we can show you the output.

h3. Creating tests with woosh.addTests(libraryName, tests)

@woosh.addTests@ registers a set of tests for a library with woosh. You'll need a @woosh.addTests@ call per library you wish to test. To make things easier to find, I recommend putting these each in a different js file.

h4. libraryName

This is the name of the library you wish to test and must be a property of @woosh.libs@ (which tells Woosh where to load the library from). Woosh provides some popular libraries by default, but you can easily add your own (see exampletests/template/index.html).

<pre><code>// create some tests for jQuery 1.3.2
woosh.addTests('jq-132', tests)</code></pre>

h4. tests

@tests@ is an object where the key is the test name, and the value is either an instance of woosh.Test or woosh.AsyncTest. As a shortcut, you can provide a function which will converted into an instance of woosh.Test automatically.

Properties beginning '$' are reserved for special use. '$preTest' for example will be called before every test, allowing you to so any setup / cleanup you need to do.

<pre><code>// create some tests for jQuery 1.3.2
woosh.addTests('jq-132', {
	'$preTest': function(prevTestName, nextTestName) {
		// do cleanup / setup
	},
	'aTest': function() {
		// do some stuff to test here
	},
	'anotherTest': new woosh.Test(1, function(test) {
		// do some stuff to test here
	}),
	'yetAnotherTest': new woosh.AsyncTest(1, function(test) {
		// do some stuff to test here
	})
})</code></pre>

It's recommended to return a meaningful value from your tests, these will be checked against the return values of the same test running against other libraries.

h3. woosh.Test(loopCount, testFunction)

With woosh.Test you can easily loop your test or provide a different result to the default ms.

h4. loopCount

The number of times you want your test to loop. Tests which run longer have less margin of error. Try to make your tests run longer than 500ms for reliable results.

h4. testFunction

This function will be called @loopCount@ times, and timed. The instance of the test will be passed in as the first parameter.

h3. woosh.Test#result(resultValue, unit='ms', highestIsBest=false)

My default, the result of a test is the time it took to run in milliseconds. However, you can override this to any numerical value of any unit.

<pre><code>// create some tests for jQuery 1.3.2
woosh.addTests('jq-132', {
	'anotherTest': new woosh.Test(1, function(test) {
		// do some stuff to test here
		test.result(divsCreated, 'divs');
	})
})</code></pre>

For instance, you may want to test how many divs are required to build a particular UI component and compare against other libraries.

For some units (like 'ms' and 'divs' in our example above), smaller values are better. However, for some units like 'fps', higher is better. Set @highestIsBest@ to true for these values.

See the @woosh.AsyncTest@ example for how you might measure framerate.

h3. woosh.AsyncTest(loopCount, testFunction)

If you're testing animation or render times you'll need to make your test asynchronous. Async tests don't finish when @testFunction@ returns, you need to call @woosh.AsyncTest#endTest@ to end the test.

The constructor parameters for @woosh.AsyncTest@ are the same as @woosh.Test@.

@woosh.AsyncTest@ inherts from @woosh.Test@.

Measuring framerate of an animation:

<pre><code>// create some tests for glow 1.7.0
woosh.addTests('glow-170', {
	'animation': new woosh.AsyncTest(1, function(test) {
		// create a 3 second animation
		var elementToAnimate = glow.dom.get('#elementToAnimate');
		
		var myAnim = glow.anim.css(elementToAnimate, 3, {
			width: 300
		});
		
		// increment a counter per frame
		var frames = 0;
		glow.events.addListener(myAnim, 'frame', function() {
			frames++;
		});
		
		// end our test when the animation completes
		glow.events.addListener(myAnim, 'complete', function() {
			// set the framerate as the result
			test.result(frames/3, 'fps', true);
			
			// we return the elements width to prove the animation happened
			test.endTest( elementToAnimate.width() );
		});
	})
})</code></pre>

h3. woosh.AsyncTest#endTest(returnVal)

Ends the async test. The return value passed in will be compared to the return value provided by other libraries tested.